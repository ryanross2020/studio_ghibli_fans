{"version":3,"sources":["components/FilmItem.js","components/Films.js","components/Film.js","App.js","serviceWorker.js","index.js"],"names":["FilmItem","film","id","title","release_date","rt_score","director","producer","description","className","to","FILMS_QUERY","gql","Films","query","loading","error","data","console","log","films","map","key","Component","FILM_QUERY","Film","this","props","match","params","variables","cache","InMemoryCache","link","HttpLink","uri","client","ApolloClient","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kVAGe,SAASA,EAAT,GAEX,IAAD,IADDC,KAAQC,EACP,EADOA,GAAIC,EACX,EADWA,MAAOC,EAClB,EADkBA,aAClB,EADgCC,SAChC,EAD0CC,SAC1C,EADoDC,SACpD,EAD8DC,YAE/D,OACE,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,sCAAYN,GACZ,4CAAkBC,IAEpB,yBAAKK,UAAU,YACb,kBAAC,IAAD,CAAMC,GAAE,gBAAWR,GAAMO,UAAU,qBAAnC,mB,oOCTV,IAAME,EAAcC,IAAH,KAuCFC,EAzBf,uKAEI,OACE,kBAAC,WAAD,KACE,wBAAIJ,UAAU,kBAAd,SACA,kBAAC,IAAD,CAAOK,MAAOH,IACX,YAA+B,IAA5BI,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClB,OAAIF,EAAgB,2CAChBC,GAAOE,QAAQC,IAAIH,GACvBE,QAAQC,IAAIF,GAGV,kBAAC,WAAD,KACGA,EAAKG,MAAMC,KAAI,SAACpB,GAAD,OACd,kBAACD,EAAD,CAAUsB,IAAKrB,EAAKC,GAAID,KAAMA,iBAdhD,GAA2BsB,a,2PCb3B,IAAMC,EAAaZ,IAAH,KA+DDa,EAjDf,uKACY,IACFvB,EAAOwB,KAAKC,MAAMC,MAAMC,OAAxB3B,GACN,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAOY,MAAOU,EAAYM,UAAW,CAAE5B,QACpC,YAA+B,IAA5Ba,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClB,GAAIF,EAAS,OAAO,0CAChBC,GAAOE,QAAQC,IAAIH,GAFM,MAWzBC,EAAKhB,KANPE,EAL2B,EAK3BA,MACAC,EAN2B,EAM3BA,aACAE,EAP2B,EAO3BA,SACAC,EAR2B,EAQ3BA,SACAF,EAT2B,EAS3BA,SACAG,EAV2B,EAU3BA,YAGF,OACE,6BACE,wBAAIC,UAAU,kBACZ,0BAAMA,UAAU,gBAAhB,UADF,IACgDN,GAEhD,wBAAIM,UAAU,QAAd,gBACA,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,mBAAd,iBACiBL,GAEjB,wBAAIK,UAAU,mBAAd,gBAA8CJ,EAA9C,KACA,wBAAII,UAAU,mBAAd,aAA2CH,GAC3C,wBAAIG,UAAU,mBAAd,aAA2CF,GAC3C,wBAAIE,UAAU,mBAAd,gBACgBD,IAGlB,6BACA,kBAAC,IAAD,CAAME,GAAG,IAAID,UAAU,6BAAvB,iBArChB,GAA0Bc,aCZpBQ,G,MAAQ,IAAIC,KACZC,EAAO,IAAIC,IAAS,CACxBC,IAAK,aAGDC,EAAS,IAAIC,IAAa,CAC9BN,QACAE,SAmBaK,E,uKAdX,OACE,kBAAC,IAAD,CAAgBF,OAAQA,GACtB,kBAAC,IAAD,KACE,yBAAK3B,UAAU,aACb,kDACA,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,IAAIC,UAAW5B,IACjC,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,YAAYC,UAAWhB,W,GARnCF,aCNEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DCZNkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACLE,QAAQF,MAAMA,EAAM0C,c","file":"static/js/main.12793984.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function FilmItem({\n  film: { id, title, release_date, rt_score, director, producer, description },\n}) {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>Title: {title}</h4>\n          <p>Release Date: {release_date}</p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/film/${id}`} className=\"btn btn-secondary\">\n            Film Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport FilmItem from './FilmItem';\n\nconst FILMS_QUERY = gql`\n  query FilmsQuery {\n    films {\n      id\n      title\n      release_date\n      director\n      producer\n      rt_score\n      description\n    }\n  }\n`;\n\nexport class Films extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\">Films</h1>\n        <Query query={FILMS_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(error);\n            console.log(data);\n\n            return (\n              <Fragment>\n                {data.films.map((film) => (\n                  <FilmItem key={film.id} film={film} />\n                ))}\n              </Fragment>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Films;\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst FILM_QUERY = gql`\n  query FilmQuery($id: ID!) {\n    film(id: $id) {\n      id\n      title\n      release_date\n      director\n      producer\n      rt_score\n      description\n    }\n  }\n`;\n\nexport class Film extends Component {\n  render() {\n    let { id } = this.props.match.params;\n    return (\n      <Fragment>\n        <Query query={FILM_QUERY} variables={{ id }}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(error);\n\n            const {\n              title,\n              release_date,\n              director,\n              producer,\n              rt_score,\n              description,\n            } = data.film;\n\n            return (\n              <div>\n                <h1 className=\"display-4 my-3\">\n                  <span className=\"text-primary\">Title:</span> {title}\n                </h1>\n                <h4 className=\"mb-3\">Film Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">\n                    Release Date: {release_date}\n                  </li>\n                  <li className=\"list-group-item\">TOMATOMETER: {rt_score}%</li>\n                  <li className=\"list-group-item\">Director: {director}</li>\n                  <li className=\"list-group-item\">Producer: {producer}</li>\n                  <li className=\"list-group-item\">\n                    Description: {description}\n                  </li>\n                </ul>\n                <hr />\n                <Link to=\"/\" className=\"btn btn-outline-secondary\">\n                  Back\n                </Link>\n              </div>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Film;\n","import React, { Component } from 'react';\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Films from './components/Films';\nimport Film from './components/Film';\nimport './App.css';\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: '/graphql',\n});\n\nconst client = new ApolloClient({\n  cache,\n  link,\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <h1>Studio Ghilbi Fans</h1>\n            <Route exact path=\"/\" component={Films} />\n            <Route exact path=\"/film/:id\" component={Film} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}